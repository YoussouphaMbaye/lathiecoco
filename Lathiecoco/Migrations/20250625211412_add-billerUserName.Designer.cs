// <auto-generated />
using System;
using Lathiecoco.models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lathiecoco.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    [Migration("20250625211412_add-billerUserName")]
    partial class addbillerUserName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lathiecoco.models.Accounting", b =>
                {
                    b.Property<string>("IdAccounting")
                        .HasColumnType("text");

                    b.Property<double>("Balance")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdAccounting");

                    b.ToTable("Accountings");
                });

            modelBuilder.Entity("Lathiecoco.models.AccountingOpPrincipal", b =>
                {
                    b.Property<string>("IdAccountingOpPrincipal")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Credited")
                        .HasColumnType("double precision");

                    b.Property<double>("DeBited")
                        .HasColumnType("double precision");

                    b.Property<string>("FkIdAccounting")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FkIdInvoiceStartupMaster")
                        .HasColumnType("text");

                    b.Property<double>("NewBalance")
                        .HasColumnType("double precision");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdAccountingOpPrincipal");

                    b.HasIndex("FkIdAccounting");

                    b.HasIndex("FkIdInvoiceStartupMaster");

                    b.ToTable("AccountingOpPrincipals");
                });

            modelBuilder.Entity("Lathiecoco.models.AccountingOpWallet", b =>
                {
                    b.Property<string>("IdAccountingOperation")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Credited")
                        .HasColumnType("double precision");

                    b.Property<double>("DeBited")
                        .HasColumnType("double precision");

                    b.Property<string>("FkIdAccounting")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FkIdBillerInvoice")
                        .HasColumnType("text");

                    b.Property<string>("FkIdInvoice")
                        .HasColumnType("text");

                    b.Property<string>("FkIdInvoiceStartupMaster")
                        .HasColumnType("text");

                    b.Property<string>("FkIdInvoiceWalletAgent")
                        .HasColumnType("text");

                    b.Property<double>("NewBalance")
                        .HasColumnType("double precision");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdAccountingOperation");

                    b.HasIndex("FkIdAccounting");

                    b.HasIndex("FkIdBillerInvoice");

                    b.HasIndex("FkIdInvoice");

                    b.HasIndex("FkIdInvoiceStartupMaster");

                    b.HasIndex("FkIdInvoiceWalletAgent");

                    b.ToTable("AccountingOpWallets");
                });

            modelBuilder.Entity("Lathiecoco.models.AccountingPrincipal", b =>
                {
                    b.Property<string>("IdAccountingPrincipal")
                        .HasColumnType("text");

                    b.Property<double>("Balance")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdAccountingPrincipal");

                    b.ToTable("AccountingPrincipals");
                });

            modelBuilder.Entity("Lathiecoco.models.Agency", b =>
                {
                    b.Property<string>("IdAgency")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FkIdAccounting")
                        .HasColumnType("text");

                    b.Property<string>("FkIdStaff")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float?>("PercentagePurchase")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdAgency");

                    b.HasIndex("FkIdAccounting")
                        .IsUnique();

                    b.HasIndex("FkIdStaff");

                    b.HasIndex("phone")
                        .IsUnique();

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("Lathiecoco.models.AgencyUser", b =>
                {
                    b.Property<string>("IdAgencyUser")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpireDateTokenRefresh")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FkIdAgency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FkIdStaff")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Profil")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokenRefresh")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdAgencyUser");

                    b.HasIndex("FkIdAgency");

                    b.HasIndex("FkIdStaff");

                    b.ToTable("AgencyUsers");
                });

            modelBuilder.Entity("Lathiecoco.models.BillerInvoice", b =>
                {
                    b.Property<string>("IdBillerInvoice")
                        .HasColumnType("text");

                    b.Property<double>("AmountToPaid")
                        .HasColumnType("double precision");

                    b.Property<string>("BillerReference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BillerUserName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("FeesAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("FkIdCustomerWallet")
                        .HasColumnType("text");

                    b.Property<string>("FkIdFeeSend")
                        .HasColumnType("text");

                    b.Property<string>("FkIdPartener")
                        .HasColumnType("text");

                    b.Property<string>("FkIdPaymentMode")
                        .HasColumnType("text");

                    b.Property<Guid?>("IdReference")
                        .HasColumnType("uuid");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("NumberOfKw")
                        .HasColumnType("double precision");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReloadBiller")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdBillerInvoice");

                    b.HasIndex("FkIdCustomerWallet");

                    b.HasIndex("FkIdFeeSend");

                    b.HasIndex("FkIdPartener");

                    b.HasIndex("FkIdPaymentMode");

                    b.HasIndex("InvoiceCode")
                        .IsUnique();

                    b.ToTable("BillerInvoices");
                });

            modelBuilder.Entity("Lathiecoco.models.CustomerWallet", b =>
                {
                    b.Property<string>("IdCustomerWallet")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("FkIdAccounting")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FkIdAgency")
                        .HasColumnType("text");

                    b.Property<string>("FkIdAgencyUser")
                        .HasColumnType("text");

                    b.Property<string>("FkIdStaff")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<float?>("PercentagePurchase")
                        .HasColumnType("real");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneBrand")
                        .HasColumnType("text");

                    b.Property<string>("PinNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PinTemp")
                        .HasColumnType("text");

                    b.Property<string>("Profile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("phoneIdentity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdCustomerWallet");

                    b.HasIndex("FkIdAccounting")
                        .IsUnique();

                    b.HasIndex("FkIdAgency");

                    b.HasIndex("FkIdAgencyUser");

                    b.HasIndex("FkIdStaff");

                    b.HasIndex("phoneIdentity", "Phone")
                        .IsUnique();

                    b.ToTable("CustomerWallets");
                });

            modelBuilder.Entity("Lathiecoco.models.FeeSend", b =>
                {
                    b.Property<string>("IdFeeSend")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("FixeAgFee")
                        .HasColumnType("real");

                    b.Property<float>("FixeCsFee")
                        .HasColumnType("real");

                    b.Property<string>("FkIdPaymentMode")
                        .HasColumnType("text");

                    b.Property<string>("FkIdStaff")
                        .HasColumnType("text");

                    b.Property<double>("MaxAmount")
                        .HasColumnType("double precision");

                    b.Property<double>("MinAmount")
                        .HasColumnType("double precision");

                    b.Property<float>("PercentAgFee")
                        .HasColumnType("real");

                    b.Property<float>("PercentCsFee")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdFeeSend");

                    b.HasIndex("FkIdPaymentMode")
                        .IsUnique();

                    b.HasIndex("FkIdStaff");

                    b.ToTable("FeeSends");
                });

            modelBuilder.Entity("Lathiecoco.models.InvoiceStartupMaster", b =>
                {
                    b.Property<string>("IdInvoiceStartupMaster")
                        .HasColumnType("text");

                    b.Property<double>("AmountToPaid")
                        .HasColumnType("double precision");

                    b.Property<double>("AmountToSend")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FkIdAgencyUser")
                        .HasColumnType("text");

                    b.Property<string>("FkIdAgent")
                        .HasColumnType("text");

                    b.Property<string>("FkIdPaymentMode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FkIdStaff")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceCode2")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsMaster")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProofLink")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ValidateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdInvoiceStartupMaster");

                    b.HasIndex("FkIdAgencyUser");

                    b.HasIndex("FkIdAgent");

                    b.HasIndex("FkIdPaymentMode");

                    b.HasIndex("FkIdStaff");

                    b.HasIndex("InvoiceCode")
                        .IsUnique();

                    b.ToTable("InvoiceStartupMasters");
                });

            modelBuilder.Entity("Lathiecoco.models.InvoiceWallet", b =>
                {
                    b.Property<string>("IdInvoiceWallet")
                        .HasColumnType("text");

                    b.Property<double>("AmountToPaid")
                        .HasColumnType("double precision");

                    b.Property<double>("AmountToSend")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("FeesAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("FkIdFeeSend")
                        .HasColumnType("text");

                    b.Property<string>("FkIdPaymentMode")
                        .HasColumnType("text");

                    b.Property<string>("FkIdRecipient")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FkIdSender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceCode2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdInvoiceWallet");

                    b.HasIndex("FkIdFeeSend");

                    b.HasIndex("FkIdPaymentMode");

                    b.HasIndex("FkIdRecipient");

                    b.HasIndex("FkIdSender");

                    b.HasIndex("InvoiceCode")
                        .IsUnique();

                    b.ToTable("InvoiceWallets");
                });

            modelBuilder.Entity("Lathiecoco.models.InvoiceWalletAgent", b =>
                {
                    b.Property<string>("IdInvoiceWalletCashier")
                        .HasColumnType("text");

                    b.Property<double>("AmountToPaid")
                        .HasColumnType("double precision");

                    b.Property<double>("AmountToSend")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("FeesAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("FkIdAgent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FkIdCustomerWallet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FkIdFeeSend")
                        .HasColumnType("text");

                    b.Property<string>("FkIdPaymentMode")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceCode2")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdInvoiceWalletCashier");

                    b.HasIndex("FkIdAgent");

                    b.HasIndex("FkIdCustomerWallet");

                    b.HasIndex("FkIdFeeSend");

                    b.HasIndex("FkIdPaymentMode");

                    b.HasIndex("InvoiceCode")
                        .IsUnique();

                    b.ToTable("InvoiceWalletAgents");
                });

            modelBuilder.Entity("Lathiecoco.models.MarchandComissionDaly", b =>
                {
                    b.Property<string>("IdMarchandComission")
                        .HasColumnType("text");

                    b.Property<double>("Comission")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaxAmount")
                        .HasColumnType("double precision");

                    b.Property<double>("MinAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdMarchandComission");

                    b.ToTable("MarchandComissionDalys");
                });

            modelBuilder.Entity("Lathiecoco.models.OwnerAgent", b =>
                {
                    b.Property<string>("IdOwnerAgent")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AgentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodeOwnerAgent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpireDateTokenRefresh")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Profil")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokenRefresh")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdOwnerAgent");

                    b.ToTable("OwnerAgents");
                });

            modelBuilder.Entity("Lathiecoco.models.Partener", b =>
                {
                    b.Property<string>("IdPartener")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FkIdAccounting")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdPartener");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("FkIdAccounting")
                        .IsUnique();

                    b.ToTable("Parteners");
                });

            modelBuilder.Entity("Lathiecoco.models.PaymentMode", b =>
                {
                    b.Property<string>("IdPaymentMode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FkIdStaff")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("status")
                        .HasColumnType("boolean");

                    b.HasKey("IdPaymentMode");

                    b.HasIndex("FkIdStaff");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PaymentModes");
                });

            modelBuilder.Entity("Lathiecoco.models.UserLog", b =>
                {
                    b.Property<string>("IdUserLog")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FkIdStaff")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IPaddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdUserLog");

                    b.HasIndex("FkIdStaff");

                    b.ToTable("UserLogs");
                });

            modelBuilder.Entity("Lathiecoco.models.AccountingOpPrincipal", b =>
                {
                    b.HasOne("Lathiecoco.models.AccountingPrincipal", "Accounting")
                        .WithMany("AccountingOpPrincipals")
                        .HasForeignKey("FkIdAccounting")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lathiecoco.models.InvoiceStartupMaster", "InvoiceStartupMaster")
                        .WithMany("AccountingOpPrincipals")
                        .HasForeignKey("FkIdInvoiceStartupMaster");

                    b.Navigation("Accounting");

                    b.Navigation("InvoiceStartupMaster");
                });

            modelBuilder.Entity("Lathiecoco.models.AccountingOpWallet", b =>
                {
                    b.HasOne("Lathiecoco.models.Accounting", "Accounting")
                        .WithMany("AccountingOpWallets")
                        .HasForeignKey("FkIdAccounting")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lathiecoco.models.BillerInvoice", "BillerInvoice")
                        .WithMany("AccountingOp")
                        .HasForeignKey("FkIdBillerInvoice");

                    b.HasOne("Lathiecoco.models.InvoiceWallet", "InvoiceWallet")
                        .WithMany("AccountingOpWallets")
                        .HasForeignKey("FkIdInvoice");

                    b.HasOne("Lathiecoco.models.InvoiceStartupMaster", "InvoiceStartupMaster")
                        .WithMany("AccountingOpWallet")
                        .HasForeignKey("FkIdInvoiceStartupMaster");

                    b.HasOne("Lathiecoco.models.InvoiceWalletAgent", "InvoiceWalletAgent")
                        .WithMany("AccountingOpWallets")
                        .HasForeignKey("FkIdInvoiceWalletAgent");

                    b.Navigation("Accounting");

                    b.Navigation("BillerInvoice");

                    b.Navigation("InvoiceStartupMaster");

                    b.Navigation("InvoiceWallet");

                    b.Navigation("InvoiceWalletAgent");
                });

            modelBuilder.Entity("Lathiecoco.models.Agency", b =>
                {
                    b.HasOne("Lathiecoco.models.Accounting", "Accounting")
                        .WithOne("Agency")
                        .HasForeignKey("Lathiecoco.models.Agency", "FkIdAccounting");

                    b.HasOne("Lathiecoco.models.OwnerAgent", "Staff")
                        .WithMany("Agencies")
                        .HasForeignKey("FkIdStaff")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Accounting");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Lathiecoco.models.AgencyUser", b =>
                {
                    b.HasOne("Lathiecoco.models.Agency", "Agency")
                        .WithMany("AgencyUsers")
                        .HasForeignKey("FkIdAgency")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lathiecoco.models.OwnerAgent", "Staff")
                        .WithMany("AgencyUsers")
                        .HasForeignKey("FkIdStaff")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Lathiecoco.models.BillerInvoice", b =>
                {
                    b.HasOne("Lathiecoco.models.CustomerWallet", "CustomerWallet")
                        .WithMany("BillerInvoices")
                        .HasForeignKey("FkIdCustomerWallet");

                    b.HasOne("Lathiecoco.models.FeeSend", "FeeSend")
                        .WithMany("BillerInvoices")
                        .HasForeignKey("FkIdFeeSend");

                    b.HasOne("Lathiecoco.models.Partener", "Partener")
                        .WithMany("BillerInvoices")
                        .HasForeignKey("FkIdPartener");

                    b.HasOne("Lathiecoco.models.PaymentMode", "PaymentModeObj")
                        .WithMany("BillerInvoices")
                        .HasForeignKey("FkIdPaymentMode");

                    b.Navigation("CustomerWallet");

                    b.Navigation("FeeSend");

                    b.Navigation("Partener");

                    b.Navigation("PaymentModeObj");
                });

            modelBuilder.Entity("Lathiecoco.models.CustomerWallet", b =>
                {
                    b.HasOne("Lathiecoco.models.Accounting", "Accounting")
                        .WithOne("CustomerWallet")
                        .HasForeignKey("Lathiecoco.models.CustomerWallet", "FkIdAccounting")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lathiecoco.models.Agency", "Agency")
                        .WithMany("CustomerWallets")
                        .HasForeignKey("FkIdAgency")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Lathiecoco.models.AgencyUser", "AgencyUser")
                        .WithMany("CustomerWallets")
                        .HasForeignKey("FkIdAgencyUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Lathiecoco.models.OwnerAgent", "Staff")
                        .WithMany("CustomerWallets")
                        .HasForeignKey("FkIdStaff");

                    b.Navigation("Accounting");

                    b.Navigation("Agency");

                    b.Navigation("AgencyUser");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Lathiecoco.models.FeeSend", b =>
                {
                    b.HasOne("Lathiecoco.models.PaymentMode", "PaymentMode")
                        .WithMany("FeeSends")
                        .HasForeignKey("FkIdPaymentMode");

                    b.HasOne("Lathiecoco.models.OwnerAgent", "Staff")
                        .WithMany("FeeSends")
                        .HasForeignKey("FkIdStaff");

                    b.Navigation("PaymentMode");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Lathiecoco.models.InvoiceStartupMaster", b =>
                {
                    b.HasOne("Lathiecoco.models.AgencyUser", "AgencyUser")
                        .WithMany("InvoiceStartupMasters")
                        .HasForeignKey("FkIdAgencyUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Lathiecoco.models.CustomerWallet", "Agent")
                        .WithMany("InvoiceStartupMasters")
                        .HasForeignKey("FkIdAgent");

                    b.HasOne("Lathiecoco.models.PaymentMode", "PaymentModeObj")
                        .WithMany("InvoiceStartupMasters")
                        .HasForeignKey("FkIdPaymentMode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lathiecoco.models.OwnerAgent", "Staff")
                        .WithMany("InvoiceStartupMasters")
                        .HasForeignKey("FkIdStaff");

                    b.Navigation("AgencyUser");

                    b.Navigation("Agent");

                    b.Navigation("PaymentModeObj");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Lathiecoco.models.InvoiceWallet", b =>
                {
                    b.HasOne("Lathiecoco.models.FeeSend", "FeeSend")
                        .WithMany("InvoiceWallet")
                        .HasForeignKey("FkIdFeeSend");

                    b.HasOne("Lathiecoco.models.PaymentMode", "PaymentModeObj")
                        .WithMany("InvoiceWallets")
                        .HasForeignKey("FkIdPaymentMode");

                    b.HasOne("Lathiecoco.models.CustomerWallet", "CustomerRecipient")
                        .WithMany("InvoiceWalletRecipeients")
                        .HasForeignKey("FkIdRecipient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lathiecoco.models.CustomerWallet", "CustomerSender")
                        .WithMany("InvoiceWalletSenders")
                        .HasForeignKey("FkIdSender")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomerRecipient");

                    b.Navigation("CustomerSender");

                    b.Navigation("FeeSend");

                    b.Navigation("PaymentModeObj");
                });

            modelBuilder.Entity("Lathiecoco.models.InvoiceWalletAgent", b =>
                {
                    b.HasOne("Lathiecoco.models.CustomerWallet", "Agent")
                        .WithMany("InvoiceWalletAgentAgents")
                        .HasForeignKey("FkIdAgent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lathiecoco.models.CustomerWallet", "CustomerWallet")
                        .WithMany("InvoiceWalletAgents")
                        .HasForeignKey("FkIdCustomerWallet")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lathiecoco.models.FeeSend", "FeeSend")
                        .WithMany("InvoiceWalletAgents")
                        .HasForeignKey("FkIdFeeSend");

                    b.HasOne("Lathiecoco.models.PaymentMode", "PaymentModeObj")
                        .WithMany("InvoiceWalletAgents")
                        .HasForeignKey("FkIdPaymentMode");

                    b.Navigation("Agent");

                    b.Navigation("CustomerWallet");

                    b.Navigation("FeeSend");

                    b.Navigation("PaymentModeObj");
                });

            modelBuilder.Entity("Lathiecoco.models.Partener", b =>
                {
                    b.HasOne("Lathiecoco.models.Accounting", "Accounting")
                        .WithOne("Partener")
                        .HasForeignKey("Lathiecoco.models.Partener", "FkIdAccounting")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accounting");
                });

            modelBuilder.Entity("Lathiecoco.models.PaymentMode", b =>
                {
                    b.HasOne("Lathiecoco.models.OwnerAgent", "Staff")
                        .WithMany("PaymentModes")
                        .HasForeignKey("FkIdStaff");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Lathiecoco.models.UserLog", b =>
                {
                    b.HasOne("Lathiecoco.models.OwnerAgent", "Staff")
                        .WithMany("UserLogs")
                        .HasForeignKey("FkIdStaff")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Lathiecoco.models.Accounting", b =>
                {
                    b.Navigation("AccountingOpWallets");

                    b.Navigation("Agency");

                    b.Navigation("CustomerWallet");

                    b.Navigation("Partener");
                });

            modelBuilder.Entity("Lathiecoco.models.AccountingPrincipal", b =>
                {
                    b.Navigation("AccountingOpPrincipals");
                });

            modelBuilder.Entity("Lathiecoco.models.Agency", b =>
                {
                    b.Navigation("AgencyUsers");

                    b.Navigation("CustomerWallets");
                });

            modelBuilder.Entity("Lathiecoco.models.AgencyUser", b =>
                {
                    b.Navigation("CustomerWallets");

                    b.Navigation("InvoiceStartupMasters");
                });

            modelBuilder.Entity("Lathiecoco.models.BillerInvoice", b =>
                {
                    b.Navigation("AccountingOp");
                });

            modelBuilder.Entity("Lathiecoco.models.CustomerWallet", b =>
                {
                    b.Navigation("BillerInvoices");

                    b.Navigation("InvoiceStartupMasters");

                    b.Navigation("InvoiceWalletAgentAgents");

                    b.Navigation("InvoiceWalletAgents");

                    b.Navigation("InvoiceWalletRecipeients");

                    b.Navigation("InvoiceWalletSenders");
                });

            modelBuilder.Entity("Lathiecoco.models.FeeSend", b =>
                {
                    b.Navigation("BillerInvoices");

                    b.Navigation("InvoiceWallet");

                    b.Navigation("InvoiceWalletAgents");
                });

            modelBuilder.Entity("Lathiecoco.models.InvoiceStartupMaster", b =>
                {
                    b.Navigation("AccountingOpPrincipals");

                    b.Navigation("AccountingOpWallet");
                });

            modelBuilder.Entity("Lathiecoco.models.InvoiceWallet", b =>
                {
                    b.Navigation("AccountingOpWallets");
                });

            modelBuilder.Entity("Lathiecoco.models.InvoiceWalletAgent", b =>
                {
                    b.Navigation("AccountingOpWallets");
                });

            modelBuilder.Entity("Lathiecoco.models.OwnerAgent", b =>
                {
                    b.Navigation("Agencies");

                    b.Navigation("AgencyUsers");

                    b.Navigation("CustomerWallets");

                    b.Navigation("FeeSends");

                    b.Navigation("InvoiceStartupMasters");

                    b.Navigation("PaymentModes");

                    b.Navigation("UserLogs");
                });

            modelBuilder.Entity("Lathiecoco.models.Partener", b =>
                {
                    b.Navigation("BillerInvoices");
                });

            modelBuilder.Entity("Lathiecoco.models.PaymentMode", b =>
                {
                    b.Navigation("BillerInvoices");

                    b.Navigation("FeeSends");

                    b.Navigation("InvoiceStartupMasters");

                    b.Navigation("InvoiceWalletAgents");

                    b.Navigation("InvoiceWallets");
                });
#pragma warning restore 612, 618
        }
    }
}
